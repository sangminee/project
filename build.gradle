plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.3'

    id "org.asciidoctor.jvm.convert" version "3.3.2" // (1) asciidoc 파일을 변환해주고, build 폴더에 복사해주는 플러그인
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExt
    asciidoctorExtensions // (2) dependencies 에서 적용한 것 추가 - asciidoctorExt을 Configuration에 지정
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor' // (3) build/generated-snippets 에 생긴 .adoc 조각들을 프로젝트 내의 .adoc 파일에서 읽어들일 수 있게 연동시켜줌
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc' // (4) MockMvc를 사용해 테스트할 예정으로 추가해줌 (restdocs-mockmvc의 testCompile 구성 -> mockMvc를 사용해서 snippets 조각들을 뽑아낼 수 있게 됨)
}

ext {
    snippetsDir = file('build/generated-snippets') // (5) snippets 파일이 저장될 경로를 설정 - 아래서 사용될 변수 선언
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // (6) 출력할 디렉토리 설정 (위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력)
}

asciidoctor { // asciidoctor 작업 구성
    configurations 'asciidoctorExt' // (7) asciidoctor에서 asciidoctorExt을 configutations로 사용하도록 설정함
    baseDirFollowsSourceFile() // (8)
    inputs.dir snippetsDir // (9) input 디렉토리 설정
    dependsOn test // (10) build 시 test 후 asciidoctor를 진행하도록 설정해줌 (순서 설정)
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')  // (11) 중복을 막기 위해 새로운 문서 생성할 때에는 전에 생성했던 문서들 지워줌
}

task copyDocument(type: Copy) { // (12) build/docs/asciidoc 디렉토리에 생성된 html 문서를 src/main/resources/static/docs 디렉토리에 복사해옴
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build { // (13) copyDocument 후 build 지정
    dependsOn copyDocument
}